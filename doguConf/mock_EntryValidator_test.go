// Code generated by mockery v2.20.0. DO NOT EDIT.

package doguConf

import mock "github.com/stretchr/testify/mock"

// MockEntryValidator is an autogenerated mock type for the EntryValidator type
type MockEntryValidator struct {
	mock.Mock
}

type MockEntryValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEntryValidator) EXPECT() *MockEntryValidator_Expecter {
	return &MockEntryValidator_Expecter{mock: &_m.Mock}
}

// Check provides a mock function with given fields: input
func (_m *MockEntryValidator) Check(input string) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEntryValidator_Check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Check'
type MockEntryValidator_Check_Call struct {
	*mock.Call
}

// Check is a helper method to define mock.On call
//  - input string
func (_e *MockEntryValidator_Expecter) Check(input interface{}) *MockEntryValidator_Check_Call {
	return &MockEntryValidator_Check_Call{Call: _e.mock.On("Check", input)}
}

func (_c *MockEntryValidator_Check_Call) Run(run func(input string)) *MockEntryValidator_Check_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockEntryValidator_Check_Call) Return(_a0 error) *MockEntryValidator_Check_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEntryValidator_Check_Call) RunAndReturn(run func(string) error) *MockEntryValidator_Check_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockEntryValidator interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEntryValidator creates a new instance of MockEntryValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEntryValidator(t mockConstructorTestingTNewMockEntryValidator) *MockEntryValidator {
	mock := &MockEntryValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
