// Code generated by mockery v2.20.0. DO NOT EDIT.

package archive

import (
	zip "archive/zip"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockZipWriter is an autogenerated mock type for the ZipWriter type
type MockZipWriter struct {
	mock.Mock
}

type MockZipWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockZipWriter) EXPECT() *MockZipWriter_Expecter {
	return &MockZipWriter_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockZipWriter) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockZipWriter_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockZipWriter_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockZipWriter_Expecter) Close() *MockZipWriter_Close_Call {
	return &MockZipWriter_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockZipWriter_Close_Call) Run(run func()) *MockZipWriter_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockZipWriter_Close_Call) Return(_a0 error) *MockZipWriter_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockZipWriter_Close_Call) RunAndReturn(run func() error) *MockZipWriter_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CreateHeader provides a mock function with given fields: fh
func (_m *MockZipWriter) CreateHeader(fh *zip.FileHeader) (io.Writer, error) {
	ret := _m.Called(fh)

	var r0 io.Writer
	var r1 error
	if rf, ok := ret.Get(0).(func(*zip.FileHeader) (io.Writer, error)); ok {
		return rf(fh)
	}
	if rf, ok := ret.Get(0).(func(*zip.FileHeader) io.Writer); ok {
		r0 = rf(fh)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Writer)
		}
	}

	if rf, ok := ret.Get(1).(func(*zip.FileHeader) error); ok {
		r1 = rf(fh)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockZipWriter_CreateHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateHeader'
type MockZipWriter_CreateHeader_Call struct {
	*mock.Call
}

// CreateHeader is a helper method to define mock.On call
//  - fh *zip.FileHeader
func (_e *MockZipWriter_Expecter) CreateHeader(fh interface{}) *MockZipWriter_CreateHeader_Call {
	return &MockZipWriter_CreateHeader_Call{Call: _e.mock.On("CreateHeader", fh)}
}

func (_c *MockZipWriter_CreateHeader_Call) Run(run func(fh *zip.FileHeader)) *MockZipWriter_CreateHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*zip.FileHeader))
	})
	return _c
}

func (_c *MockZipWriter_CreateHeader_Call) Return(_a0 io.Writer, _a1 error) *MockZipWriter_CreateHeader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockZipWriter_CreateHeader_Call) RunAndReturn(run func(*zip.FileHeader) (io.Writer, error)) *MockZipWriter_CreateHeader_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockZipWriter interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockZipWriter creates a new instance of MockZipWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockZipWriter(t mockConstructorTestingTNewMockZipWriter) *MockZipWriter {
	mock := &MockZipWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
