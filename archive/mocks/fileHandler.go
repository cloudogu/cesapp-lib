// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	io "io"
	os "os"

	mock "github.com/stretchr/testify/mock"

	zip "archive/zip"
)

// FileHandler is an autogenerated mock type for the fileHandler type
type FileHandler struct {
	mock.Mock
}

// Copy provides a mock function with given fields: dst, src
func (_m *FileHandler) Copy(dst io.Writer, src io.Reader) (int64, error) {
	ret := _m.Called(dst, src)

	var r0 int64
	if rf, ok := ret.Get(0).(func(io.Writer, io.Reader) int64); ok {
		r0 = rf(dst, src)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(io.Writer, io.Reader) error); ok {
		r1 = rf(dst, src)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: filename
func (_m *FileHandler) Create(filename string) (*os.File, error) {
	ret := _m.Called(filename)

	var r0 *os.File
	if rf, ok := ret.Get(0).(func(string) *os.File); ok {
		r0 = rf(filename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFileInfoHeader provides a mock function with given fields: filePath
func (_m *FileHandler) GetFileInfoHeader(filePath string) (*zip.FileHeader, error) {
	ret := _m.Called(filePath)

	var r0 *zip.FileHeader
	if rf, ok := ret.Get(0).(func(string) *zip.FileHeader); ok {
		r0 = rf(filePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zip.FileHeader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Open provides a mock function with given fields: filename
func (_m *FileHandler) Open(filename string) (*os.File, error) {
	ret := _m.Called(filename)

	var r0 *os.File
	if rf, ok := ret.Get(0).(func(string) *os.File); ok {
		r0 = rf(filename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFileHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewFileHandler creates a new instance of FileHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFileHandler(t mockConstructorTestingTNewFileHandler) *FileHandler {
	mock := &FileHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
