// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	zip "archive/zip"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// ZipWriter is an autogenerated mock type for the zipWriter type
type ZipWriter struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *ZipWriter) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateHeader provides a mock function with given fields: fh
func (_m *ZipWriter) CreateHeader(fh *zip.FileHeader) (io.Writer, error) {
	ret := _m.Called(fh)

	var r0 io.Writer
	if rf, ok := ret.Get(0).(func(*zip.FileHeader) io.Writer); ok {
		r0 = rf(fh)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Writer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*zip.FileHeader) error); ok {
		r1 = rf(fh)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewZipWriter interface {
	mock.TestingT
	Cleanup(func())
}

// NewZipWriter creates a new instance of ZipWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewZipWriter(t mockConstructorTestingTNewZipWriter) *ZipWriter {
	mock := &ZipWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
