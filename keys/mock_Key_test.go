// Code generated by mockery v2.20.0. DO NOT EDIT.

package keys

import mock "github.com/stretchr/testify/mock"

// MockKey is an autogenerated mock type for the Key type
type MockKey struct {
	mock.Mock
}

type MockKey_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKey) EXPECT() *MockKey_Expecter {
	return &MockKey_Expecter{mock: &_m.Mock}
}

// AsBytes provides a mock function with given fields:
func (_m *MockKey) AsBytes() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKey_AsBytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AsBytes'
type MockKey_AsBytes_Call struct {
	*mock.Call
}

// AsBytes is a helper method to define mock.On call
func (_e *MockKey_Expecter) AsBytes() *MockKey_AsBytes_Call {
	return &MockKey_AsBytes_Call{Call: _e.mock.On("AsBytes")}
}

func (_c *MockKey_AsBytes_Call) Run(run func()) *MockKey_AsBytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKey_AsBytes_Call) Return(_a0 []byte, _a1 error) *MockKey_AsBytes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKey_AsBytes_Call) RunAndReturn(run func() ([]byte, error)) *MockKey_AsBytes_Call {
	_c.Call.Return(run)
	return _c
}

// AsString provides a mock function with given fields:
func (_m *MockKey) AsString() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKey_AsString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AsString'
type MockKey_AsString_Call struct {
	*mock.Call
}

// AsString is a helper method to define mock.On call
func (_e *MockKey_Expecter) AsString() *MockKey_AsString_Call {
	return &MockKey_AsString_Call{Call: _e.mock.On("AsString")}
}

func (_c *MockKey_AsString_Call) Run(run func()) *MockKey_AsString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKey_AsString_Call) Return(_a0 string, _a1 error) *MockKey_AsString_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKey_AsString_Call) RunAndReturn(run func() (string, error)) *MockKey_AsString_Call {
	_c.Call.Return(run)
	return _c
}

// ToFile provides a mock function with given fields: path
func (_m *MockKey) ToFile(path string) error {
	ret := _m.Called(path)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockKey_ToFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToFile'
type MockKey_ToFile_Call struct {
	*mock.Call
}

// ToFile is a helper method to define mock.On call
//  - path string
func (_e *MockKey_Expecter) ToFile(path interface{}) *MockKey_ToFile_Call {
	return &MockKey_ToFile_Call{Call: _e.mock.On("ToFile", path)}
}

func (_c *MockKey_ToFile_Call) Run(run func(path string)) *MockKey_ToFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockKey_ToFile_Call) Return(_a0 error) *MockKey_ToFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKey_ToFile_Call) RunAndReturn(run func(string) error) *MockKey_ToFile_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockKey interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockKey creates a new instance of MockKey. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockKey(t mockConstructorTestingTNewMockKey) *MockKey {
	mock := &MockKey{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
