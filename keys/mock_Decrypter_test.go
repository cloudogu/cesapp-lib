// Code generated by mockery v2.20.0. DO NOT EDIT.

package keys

import (
	rsa "crypto/rsa"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockDecrypter is an autogenerated mock type for the Decrypter type
type MockDecrypter struct {
	mock.Mock
}

type MockDecrypter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDecrypter) EXPECT() *MockDecrypter_Expecter {
	return &MockDecrypter_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: rand, priv, ciphertext
func (_m *MockDecrypter) Execute(rand io.Reader, priv *rsa.PrivateKey, ciphertext []byte) ([]byte, error) {
	ret := _m.Called(rand, priv, ciphertext)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(io.Reader, *rsa.PrivateKey, []byte) ([]byte, error)); ok {
		return rf(rand, priv, ciphertext)
	}
	if rf, ok := ret.Get(0).(func(io.Reader, *rsa.PrivateKey, []byte) []byte); ok {
		r0 = rf(rand, priv, ciphertext)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(io.Reader, *rsa.PrivateKey, []byte) error); ok {
		r1 = rf(rand, priv, ciphertext)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDecrypter_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockDecrypter_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//  - rand io.Reader
//  - priv *rsa.PrivateKey
//  - ciphertext []byte
func (_e *MockDecrypter_Expecter) Execute(rand interface{}, priv interface{}, ciphertext interface{}) *MockDecrypter_Execute_Call {
	return &MockDecrypter_Execute_Call{Call: _e.mock.On("Execute", rand, priv, ciphertext)}
}

func (_c *MockDecrypter_Execute_Call) Run(run func(rand io.Reader, priv *rsa.PrivateKey, ciphertext []byte)) *MockDecrypter_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Reader), args[1].(*rsa.PrivateKey), args[2].([]byte))
	})
	return _c
}

func (_c *MockDecrypter_Execute_Call) Return(_a0 []byte, _a1 error) *MockDecrypter_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDecrypter_Execute_Call) RunAndReturn(run func(io.Reader, *rsa.PrivateKey, []byte) ([]byte, error)) *MockDecrypter_Execute_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockDecrypter interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockDecrypter creates a new instance of MockDecrypter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDecrypter(t mockConstructorTestingTNewMockDecrypter) *MockDecrypter {
	mock := &MockDecrypter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
