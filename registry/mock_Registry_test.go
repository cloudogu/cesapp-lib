// Code generated by mockery v2.20.0. DO NOT EDIT.

package registry

import mock "github.com/stretchr/testify/mock"

// MockRegistry is an autogenerated mock type for the Registry type
type MockRegistry struct {
	mock.Mock
}

type MockRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRegistry) EXPECT() *MockRegistry_Expecter {
	return &MockRegistry_Expecter{mock: &_m.Mock}
}

// BlueprintRegistry provides a mock function with given fields:
func (_m *MockRegistry) BlueprintRegistry() ConfigurationContext {
	ret := _m.Called()

	var r0 ConfigurationContext
	if rf, ok := ret.Get(0).(func() ConfigurationContext); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ConfigurationContext)
		}
	}

	return r0
}

// MockRegistry_BlueprintRegistry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlueprintRegistry'
type MockRegistry_BlueprintRegistry_Call struct {
	*mock.Call
}

// BlueprintRegistry is a helper method to define mock.On call
func (_e *MockRegistry_Expecter) BlueprintRegistry() *MockRegistry_BlueprintRegistry_Call {
	return &MockRegistry_BlueprintRegistry_Call{Call: _e.mock.On("BlueprintRegistry")}
}

func (_c *MockRegistry_BlueprintRegistry_Call) Run(run func()) *MockRegistry_BlueprintRegistry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRegistry_BlueprintRegistry_Call) Return(_a0 ConfigurationContext) *MockRegistry_BlueprintRegistry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRegistry_BlueprintRegistry_Call) RunAndReturn(run func() ConfigurationContext) *MockRegistry_BlueprintRegistry_Call {
	_c.Call.Return(run)
	return _c
}

// DoguConfig provides a mock function with given fields: dogu
func (_m *MockRegistry) DoguConfig(dogu string) ConfigurationContext {
	ret := _m.Called(dogu)

	var r0 ConfigurationContext
	if rf, ok := ret.Get(0).(func(string) ConfigurationContext); ok {
		r0 = rf(dogu)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ConfigurationContext)
		}
	}

	return r0
}

// MockRegistry_DoguConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoguConfig'
type MockRegistry_DoguConfig_Call struct {
	*mock.Call
}

// DoguConfig is a helper method to define mock.On call
//  - dogu string
func (_e *MockRegistry_Expecter) DoguConfig(dogu interface{}) *MockRegistry_DoguConfig_Call {
	return &MockRegistry_DoguConfig_Call{Call: _e.mock.On("DoguConfig", dogu)}
}

func (_c *MockRegistry_DoguConfig_Call) Run(run func(dogu string)) *MockRegistry_DoguConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRegistry_DoguConfig_Call) Return(_a0 ConfigurationContext) *MockRegistry_DoguConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRegistry_DoguConfig_Call) RunAndReturn(run func(string) ConfigurationContext) *MockRegistry_DoguConfig_Call {
	_c.Call.Return(run)
	return _c
}

// DoguRegistry provides a mock function with given fields:
func (_m *MockRegistry) DoguRegistry() DoguRegistry {
	ret := _m.Called()

	var r0 DoguRegistry
	if rf, ok := ret.Get(0).(func() DoguRegistry); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(DoguRegistry)
		}
	}

	return r0
}

// MockRegistry_DoguRegistry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoguRegistry'
type MockRegistry_DoguRegistry_Call struct {
	*mock.Call
}

// DoguRegistry is a helper method to define mock.On call
func (_e *MockRegistry_Expecter) DoguRegistry() *MockRegistry_DoguRegistry_Call {
	return &MockRegistry_DoguRegistry_Call{Call: _e.mock.On("DoguRegistry")}
}

func (_c *MockRegistry_DoguRegistry_Call) Run(run func()) *MockRegistry_DoguRegistry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRegistry_DoguRegistry_Call) Return(_a0 DoguRegistry) *MockRegistry_DoguRegistry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRegistry_DoguRegistry_Call) RunAndReturn(run func() DoguRegistry) *MockRegistry_DoguRegistry_Call {
	_c.Call.Return(run)
	return _c
}

// GetNode provides a mock function with given fields:
func (_m *MockRegistry) GetNode() (Node, error) {
	ret := _m.Called()

	var r0 Node
	var r1 error
	if rf, ok := ret.Get(0).(func() (Node, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() Node); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(Node)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRegistry_GetNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNode'
type MockRegistry_GetNode_Call struct {
	*mock.Call
}

// GetNode is a helper method to define mock.On call
func (_e *MockRegistry_Expecter) GetNode() *MockRegistry_GetNode_Call {
	return &MockRegistry_GetNode_Call{Call: _e.mock.On("GetNode")}
}

func (_c *MockRegistry_GetNode_Call) Run(run func()) *MockRegistry_GetNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRegistry_GetNode_Call) Return(_a0 Node, _a1 error) *MockRegistry_GetNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRegistry_GetNode_Call) RunAndReturn(run func() (Node, error)) *MockRegistry_GetNode_Call {
	_c.Call.Return(run)
	return _c
}

// GlobalConfig provides a mock function with given fields:
func (_m *MockRegistry) GlobalConfig() ConfigurationContext {
	ret := _m.Called()

	var r0 ConfigurationContext
	if rf, ok := ret.Get(0).(func() ConfigurationContext); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ConfigurationContext)
		}
	}

	return r0
}

// MockRegistry_GlobalConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GlobalConfig'
type MockRegistry_GlobalConfig_Call struct {
	*mock.Call
}

// GlobalConfig is a helper method to define mock.On call
func (_e *MockRegistry_Expecter) GlobalConfig() *MockRegistry_GlobalConfig_Call {
	return &MockRegistry_GlobalConfig_Call{Call: _e.mock.On("GlobalConfig")}
}

func (_c *MockRegistry_GlobalConfig_Call) Run(run func()) *MockRegistry_GlobalConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRegistry_GlobalConfig_Call) Return(_a0 ConfigurationContext) *MockRegistry_GlobalConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRegistry_GlobalConfig_Call) RunAndReturn(run func() ConfigurationContext) *MockRegistry_GlobalConfig_Call {
	_c.Call.Return(run)
	return _c
}

// HostConfig provides a mock function with given fields: hostService
func (_m *MockRegistry) HostConfig(hostService string) ConfigurationContext {
	ret := _m.Called(hostService)

	var r0 ConfigurationContext
	if rf, ok := ret.Get(0).(func(string) ConfigurationContext); ok {
		r0 = rf(hostService)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ConfigurationContext)
		}
	}

	return r0
}

// MockRegistry_HostConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HostConfig'
type MockRegistry_HostConfig_Call struct {
	*mock.Call
}

// HostConfig is a helper method to define mock.On call
//  - hostService string
func (_e *MockRegistry_Expecter) HostConfig(hostService interface{}) *MockRegistry_HostConfig_Call {
	return &MockRegistry_HostConfig_Call{Call: _e.mock.On("HostConfig", hostService)}
}

func (_c *MockRegistry_HostConfig_Call) Run(run func(hostService string)) *MockRegistry_HostConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRegistry_HostConfig_Call) Return(_a0 ConfigurationContext) *MockRegistry_HostConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRegistry_HostConfig_Call) RunAndReturn(run func(string) ConfigurationContext) *MockRegistry_HostConfig_Call {
	_c.Call.Return(run)
	return _c
}

// RootConfig provides a mock function with given fields:
func (_m *MockRegistry) RootConfig() WatchConfigurationContext {
	ret := _m.Called()

	var r0 WatchConfigurationContext
	if rf, ok := ret.Get(0).(func() WatchConfigurationContext); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(WatchConfigurationContext)
		}
	}

	return r0
}

// MockRegistry_RootConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RootConfig'
type MockRegistry_RootConfig_Call struct {
	*mock.Call
}

// RootConfig is a helper method to define mock.On call
func (_e *MockRegistry_Expecter) RootConfig() *MockRegistry_RootConfig_Call {
	return &MockRegistry_RootConfig_Call{Call: _e.mock.On("RootConfig")}
}

func (_c *MockRegistry_RootConfig_Call) Run(run func()) *MockRegistry_RootConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRegistry_RootConfig_Call) Return(_a0 WatchConfigurationContext) *MockRegistry_RootConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRegistry_RootConfig_Call) RunAndReturn(run func() WatchConfigurationContext) *MockRegistry_RootConfig_Call {
	_c.Call.Return(run)
	return _c
}

// State provides a mock function with given fields: dogu
func (_m *MockRegistry) State(dogu string) State {
	ret := _m.Called(dogu)

	var r0 State
	if rf, ok := ret.Get(0).(func(string) State); ok {
		r0 = rf(dogu)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(State)
		}
	}

	return r0
}

// MockRegistry_State_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'State'
type MockRegistry_State_Call struct {
	*mock.Call
}

// State is a helper method to define mock.On call
//  - dogu string
func (_e *MockRegistry_Expecter) State(dogu interface{}) *MockRegistry_State_Call {
	return &MockRegistry_State_Call{Call: _e.mock.On("State", dogu)}
}

func (_c *MockRegistry_State_Call) Run(run func(dogu string)) *MockRegistry_State_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRegistry_State_Call) Return(_a0 State) *MockRegistry_State_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRegistry_State_Call) RunAndReturn(run func(string) State) *MockRegistry_State_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockRegistry interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRegistry creates a new instance of MockRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRegistry(t mockConstructorTestingTNewMockRegistry) *MockRegistry {
	mock := &MockRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
