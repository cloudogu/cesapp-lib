// Code generated by mockery v2.20.0. DO NOT EDIT.

package registry

import (
	context "context"

	client "go.etcd.io/etcd/client/v2"

	mock "github.com/stretchr/testify/mock"
)

// mockEtcdClient is an autogenerated mock type for the etcdClient type
type mockEtcdClient struct {
	mock.Mock
}

type mockEtcdClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockEtcdClient) EXPECT() *mockEtcdClient_Expecter {
	return &mockEtcdClient_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: key, options
func (_m *mockEtcdClient) Delete(key string, options *client.DeleteOptions) error {
	ret := _m.Called(key, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *client.DeleteOptions) error); ok {
		r0 = rf(key, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockEtcdClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type mockEtcdClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//  - key string
//  - options *client.DeleteOptions
func (_e *mockEtcdClient_Expecter) Delete(key interface{}, options interface{}) *mockEtcdClient_Delete_Call {
	return &mockEtcdClient_Delete_Call{Call: _e.mock.On("Delete", key, options)}
}

func (_c *mockEtcdClient_Delete_Call) Run(run func(key string, options *client.DeleteOptions)) *mockEtcdClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*client.DeleteOptions))
	})
	return _c
}

func (_c *mockEtcdClient_Delete_Call) Return(_a0 error) *mockEtcdClient_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockEtcdClient_Delete_Call) RunAndReturn(run func(string, *client.DeleteOptions) error) *mockEtcdClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRecursive provides a mock function with given fields: key
func (_m *mockEtcdClient) DeleteRecursive(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockEtcdClient_DeleteRecursive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRecursive'
type mockEtcdClient_DeleteRecursive_Call struct {
	*mock.Call
}

// DeleteRecursive is a helper method to define mock.On call
//  - key string
func (_e *mockEtcdClient_Expecter) DeleteRecursive(key interface{}) *mockEtcdClient_DeleteRecursive_Call {
	return &mockEtcdClient_DeleteRecursive_Call{Call: _e.mock.On("DeleteRecursive", key)}
}

func (_c *mockEtcdClient_DeleteRecursive_Call) Run(run func(key string)) *mockEtcdClient_DeleteRecursive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockEtcdClient_DeleteRecursive_Call) Return(_a0 error) *mockEtcdClient_DeleteRecursive_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockEtcdClient_DeleteRecursive_Call) RunAndReturn(run func(string) error) *mockEtcdClient_DeleteRecursive_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: key
func (_m *mockEtcdClient) Exists(key string) (bool, error) {
	ret := _m.Called(key)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockEtcdClient_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type mockEtcdClient_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//  - key string
func (_e *mockEtcdClient_Expecter) Exists(key interface{}) *mockEtcdClient_Exists_Call {
	return &mockEtcdClient_Exists_Call{Call: _e.mock.On("Exists", key)}
}

func (_c *mockEtcdClient_Exists_Call) Run(run func(key string)) *mockEtcdClient_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockEtcdClient_Exists_Call) Return(_a0 bool, _a1 error) *mockEtcdClient_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockEtcdClient_Exists_Call) RunAndReturn(run func(string) (bool, error)) *mockEtcdClient_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *mockEtcdClient) Get(key string) (string, error) {
	ret := _m.Called(key)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockEtcdClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type mockEtcdClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - key string
func (_e *mockEtcdClient_Expecter) Get(key interface{}) *mockEtcdClient_Get_Call {
	return &mockEtcdClient_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *mockEtcdClient_Get_Call) Run(run func(key string)) *mockEtcdClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockEtcdClient_Get_Call) Return(_a0 string, _a1 error) *mockEtcdClient_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockEtcdClient_Get_Call) RunAndReturn(run func(string) (string, error)) *mockEtcdClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetChildrenPaths provides a mock function with given fields: key
func (_m *mockEtcdClient) GetChildrenPaths(key string) ([]string, error) {
	ret := _m.Called(key)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockEtcdClient_GetChildrenPaths_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChildrenPaths'
type mockEtcdClient_GetChildrenPaths_Call struct {
	*mock.Call
}

// GetChildrenPaths is a helper method to define mock.On call
//  - key string
func (_e *mockEtcdClient_Expecter) GetChildrenPaths(key interface{}) *mockEtcdClient_GetChildrenPaths_Call {
	return &mockEtcdClient_GetChildrenPaths_Call{Call: _e.mock.On("GetChildrenPaths", key)}
}

func (_c *mockEtcdClient_GetChildrenPaths_Call) Run(run func(key string)) *mockEtcdClient_GetChildrenPaths_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockEtcdClient_GetChildrenPaths_Call) Return(_a0 []string, _a1 error) *mockEtcdClient_GetChildrenPaths_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockEtcdClient_GetChildrenPaths_Call) RunAndReturn(run func(string) ([]string, error)) *mockEtcdClient_GetChildrenPaths_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecursive provides a mock function with given fields: key
func (_m *mockEtcdClient) GetRecursive(key string) (map[string]string, error) {
	ret := _m.Called(key)

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string]string, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockEtcdClient_GetRecursive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecursive'
type mockEtcdClient_GetRecursive_Call struct {
	*mock.Call
}

// GetRecursive is a helper method to define mock.On call
//  - key string
func (_e *mockEtcdClient_Expecter) GetRecursive(key interface{}) *mockEtcdClient_GetRecursive_Call {
	return &mockEtcdClient_GetRecursive_Call{Call: _e.mock.On("GetRecursive", key)}
}

func (_c *mockEtcdClient_GetRecursive_Call) Run(run func(key string)) *mockEtcdClient_GetRecursive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockEtcdClient_GetRecursive_Call) Return(_a0 map[string]string, _a1 error) *mockEtcdClient_GetRecursive_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockEtcdClient_GetRecursive_Call) RunAndReturn(run func(string) (map[string]string, error)) *mockEtcdClient_GetRecursive_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: key, value, options
func (_m *mockEtcdClient) Set(key string, value string, options *client.SetOptions) (string, error) {
	ret := _m.Called(key, value, options)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *client.SetOptions) (string, error)); ok {
		return rf(key, value, options)
	}
	if rf, ok := ret.Get(0).(func(string, string, *client.SetOptions) string); ok {
		r0 = rf(key, value, options)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, *client.SetOptions) error); ok {
		r1 = rf(key, value, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockEtcdClient_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type mockEtcdClient_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//  - key string
//  - value string
//  - options *client.SetOptions
func (_e *mockEtcdClient_Expecter) Set(key interface{}, value interface{}, options interface{}) *mockEtcdClient_Set_Call {
	return &mockEtcdClient_Set_Call{Call: _e.mock.On("Set", key, value, options)}
}

func (_c *mockEtcdClient_Set_Call) Run(run func(key string, value string, options *client.SetOptions)) *mockEtcdClient_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*client.SetOptions))
	})
	return _c
}

func (_c *mockEtcdClient_Set_Call) Return(_a0 string, _a1 error) *mockEtcdClient_Set_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockEtcdClient_Set_Call) RunAndReturn(run func(string, string, *client.SetOptions) (string, error)) *mockEtcdClient_Set_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function with given fields: ctx, key, recursive, eventChannel
func (_m *mockEtcdClient) Watch(ctx context.Context, key string, recursive bool, eventChannel chan *client.Response) {
	_m.Called(ctx, key, recursive, eventChannel)
}

// mockEtcdClient_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type mockEtcdClient_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//  - ctx context.Context
//  - key string
//  - recursive bool
//  - eventChannel chan *client.Response
func (_e *mockEtcdClient_Expecter) Watch(ctx interface{}, key interface{}, recursive interface{}, eventChannel interface{}) *mockEtcdClient_Watch_Call {
	return &mockEtcdClient_Watch_Call{Call: _e.mock.On("Watch", ctx, key, recursive, eventChannel)}
}

func (_c *mockEtcdClient_Watch_Call) Run(run func(ctx context.Context, key string, recursive bool, eventChannel chan *client.Response)) *mockEtcdClient_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool), args[3].(chan *client.Response))
	})
	return _c
}

func (_c *mockEtcdClient_Watch_Call) Return() *mockEtcdClient_Watch_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockEtcdClient_Watch_Call) RunAndReturn(run func(context.Context, string, bool, chan *client.Response)) *mockEtcdClient_Watch_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockEtcdClient interface {
	mock.TestingT
	Cleanup(func())
}

// newMockEtcdClient creates a new instance of mockEtcdClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockEtcdClient(t mockConstructorTestingTnewMockEtcdClient) *mockEtcdClient {
	mock := &mockEtcdClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
