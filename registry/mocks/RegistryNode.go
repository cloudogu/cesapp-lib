// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	registry "github.com/cloudogu/cesapp-lib/registry"
	mock "github.com/stretchr/testify/mock"
)

// RegistryNode is an autogenerated mock type for the RegistryNode type
type RegistryNode struct {
	mock.Mock
}

// GetFullKey provides a mock function with given fields:
func (_m *RegistryNode) GetFullKey() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetKey provides a mock function with given fields:
func (_m *RegistryNode) GetKey() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetParent provides a mock function with given fields:
func (_m *RegistryNode) GetParent() registry.RegistryNode {
	ret := _m.Called()

	var r0 registry.RegistryNode
	if rf, ok := ret.Get(0).(func() registry.RegistryNode); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(registry.RegistryNode)
		}
	}

	return r0
}

// GetSubNode provides a mock function with given fields: key
func (_m *RegistryNode) GetSubNode(key string) registry.RegistryNode {
	ret := _m.Called(key)

	var r0 registry.RegistryNode
	if rf, ok := ret.Get(0).(func(string) registry.RegistryNode); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(registry.RegistryNode)
		}
	}

	return r0
}

// GetSubNodes provides a mock function with given fields:
func (_m *RegistryNode) GetSubNodes() []registry.RegistryNode {
	ret := _m.Called()

	var r0 []registry.RegistryNode
	if rf, ok := ret.Get(0).(func() []registry.RegistryNode); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]registry.RegistryNode)
		}
	}

	return r0
}

// GetValue provides a mock function with given fields:
func (_m *RegistryNode) GetValue() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// HasSubNodes provides a mock function with given fields:
func (_m *RegistryNode) HasSubNodes() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsDir provides a mock function with given fields:
func (_m *RegistryNode) IsDir() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTNewRegistryNode interface {
	mock.TestingT
	Cleanup(func())
}

// NewRegistryNode creates a new instance of RegistryNode. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRegistryNode(t mockConstructorTestingTNewRegistryNode) *RegistryNode {
	mock := &RegistryNode{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
