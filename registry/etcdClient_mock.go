// Code generated by mockery v2.13.0-beta.1. DO NOT EDIT.
package registry

import (
	context "context"
	"go.etcd.io/etcd/client/v2"

	mock "github.com/stretchr/testify/mock"
)

// etcdClientMock is an autogenerated mock type for the etcdClientMock type
type etcdClientMock struct {
	mock.Mock
}

// Delete provides a mock function with given fields: key, options
func (_m *etcdClientMock) Delete(key string, options *client.DeleteOptions) error {
	ret := _m.Called(key, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *client.DeleteOptions) error); ok {
		r0 = rf(key, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRecursive provides a mock function with given fields: key
func (_m *etcdClientMock) DeleteRecursive(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: key
func (_m *etcdClientMock) Exists(key string) (bool, error) {
	ret := _m.Called(key)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: key
func (_m *etcdClientMock) Get(key string) (string, error) {
	ret := _m.Called(key)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChildrenPaths provides a mock function with given fields: key
func (_m *etcdClientMock) GetChildrenPaths(key string) ([]string, error) {
	ret := _m.Called(key)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecursive provides a mock function with given fields: key
func (_m *etcdClientMock) GetRecursive(key string) (map[string]string, error) {
	ret := _m.Called(key)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(string) map[string]string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: key, value, options
func (_m *etcdClientMock) Set(key string, value string, options *client.SetOptions) (string, error) {
	ret := _m.Called(key, value, options)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, *client.SetOptions) string); ok {
		r0 = rf(key, value, options)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *client.SetOptions) error); ok {
		r1 = rf(key, value, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Watch provides a mock function with given fields: ctx, key, recursive, eventChannel
func (_m *etcdClientMock) Watch(ctx context.Context, key string, recursive bool, eventChannel chan *client.Response) {
	_m.Called(ctx, key, recursive, eventChannel)
}

type newEtcdClientT interface {
	mock.TestingT
	Cleanup(func())
}

// newEtcdClient creates a new instance of etcdClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newEtcdClient(t newEtcdClientT) *etcdClientMock {
	mock := &etcdClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
