// Code generated by mockery v2.20.0. DO NOT EDIT.

package config

import mock "github.com/stretchr/testify/mock"

// mockConfigReader is an autogenerated mock type for the configReader type
type mockConfigReader struct {
	mock.Mock
}

type mockConfigReader_Expecter struct {
	mock *mock.Mock
}

func (_m *mockConfigReader) EXPECT() *mockConfigReader_Expecter {
	return &mockConfigReader_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: key
func (_m *mockConfigReader) Get(key string) (string, error) {
	ret := _m.Called(key)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockConfigReader_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type mockConfigReader_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - key string
func (_e *mockConfigReader_Expecter) Get(key interface{}) *mockConfigReader_Get_Call {
	return &mockConfigReader_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *mockConfigReader_Get_Call) Run(run func(key string)) *mockConfigReader_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockConfigReader_Get_Call) Return(value string, err error) *mockConfigReader_Get_Call {
	_c.Call.Return(value, err)
	return _c
}

func (_c *mockConfigReader_Get_Call) RunAndReturn(run func(string) (string, error)) *mockConfigReader_Get_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockConfigReader interface {
	mock.TestingT
	Cleanup(func())
}

// newMockConfigReader creates a new instance of mockConfigReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockConfigReader(t mockConstructorTestingTnewMockConfigReader) *mockConfigReader {
	mock := &mockConfigReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
