// Code generated by mockery v2.20.0. DO NOT EDIT.

package credentials

import (
	core "github.com/cloudogu/cesapp-lib/core"
	mock "github.com/stretchr/testify/mock"
)

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

type MockStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStore) EXPECT() *MockStore_Expecter {
	return &MockStore_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: id, creds
func (_m *MockStore) Add(id string, creds *core.Credentials) error {
	ret := _m.Called(id, creds)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *core.Credentials) error); ok {
		r0 = rf(id, creds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockStore_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//  - id string
//  - creds *core.Credentials
func (_e *MockStore_Expecter) Add(id interface{}, creds interface{}) *MockStore_Add_Call {
	return &MockStore_Add_Call{Call: _e.mock.On("Add", id, creds)}
}

func (_c *MockStore_Add_Call) Run(run func(id string, creds *core.Credentials)) *MockStore_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*core.Credentials))
	})
	return _c
}

func (_c *MockStore_Add_Call) Return(_a0 error) *MockStore_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_Add_Call) RunAndReturn(run func(string, *core.Credentials) error) *MockStore_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: id
func (_m *MockStore) Get(id string) *core.Credentials {
	ret := _m.Called(id)

	var r0 *core.Credentials
	if rf, ok := ret.Get(0).(func(string) *core.Credentials); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.Credentials)
		}
	}

	return r0
}

// MockStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - id string
func (_e *MockStore_Expecter) Get(id interface{}) *MockStore_Get_Call {
	return &MockStore_Get_Call{Call: _e.mock.On("Get", id)}
}

func (_c *MockStore_Get_Call) Run(run func(id string)) *MockStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockStore_Get_Call) Return(_a0 *core.Credentials) *MockStore_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_Get_Call) RunAndReturn(run func(string) *core.Credentials) *MockStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: id
func (_m *MockStore) Remove(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockStore_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//  - id string
func (_e *MockStore_Expecter) Remove(id interface{}) *MockStore_Remove_Call {
	return &MockStore_Remove_Call{Call: _e.mock.On("Remove", id)}
}

func (_c *MockStore_Remove_Call) Run(run func(id string)) *MockStore_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockStore_Remove_Call) Return(_a0 error) *MockStore_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_Remove_Call) RunAndReturn(run func(string) error) *MockStore_Remove_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockStore(t mockConstructorTestingTNewMockStore) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
