// Code generated by mockery v2.20.0. DO NOT EDIT.

package remote

import mock "github.com/stretchr/testify/mock"

// MockURLSchema is an autogenerated mock type for the URLSchema type
type MockURLSchema struct {
	mock.Mock
}

type MockURLSchema_Expecter struct {
	mock *mock.Mock
}

func (_m *MockURLSchema) EXPECT() *MockURLSchema_Expecter {
	return &MockURLSchema_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: name
func (_m *MockURLSchema) Create(name string) string {
	ret := _m.Called(name)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockURLSchema_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockURLSchema_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//  - name string
func (_e *MockURLSchema_Expecter) Create(name interface{}) *MockURLSchema_Create_Call {
	return &MockURLSchema_Create_Call{Call: _e.mock.On("Create", name)}
}

func (_c *MockURLSchema_Create_Call) Run(run func(name string)) *MockURLSchema_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockURLSchema_Create_Call) Return(_a0 string) *MockURLSchema_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockURLSchema_Create_Call) RunAndReturn(run func(string) string) *MockURLSchema_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: name
func (_m *MockURLSchema) Get(name string) string {
	ret := _m.Called(name)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockURLSchema_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockURLSchema_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - name string
func (_e *MockURLSchema_Expecter) Get(name interface{}) *MockURLSchema_Get_Call {
	return &MockURLSchema_Get_Call{Call: _e.mock.On("Get", name)}
}

func (_c *MockURLSchema_Get_Call) Run(run func(name string)) *MockURLSchema_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockURLSchema_Get_Call) Return(_a0 string) *MockURLSchema_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockURLSchema_Get_Call) RunAndReturn(run func(string) string) *MockURLSchema_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields:
func (_m *MockURLSchema) GetAll() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockURLSchema_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockURLSchema_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *MockURLSchema_Expecter) GetAll() *MockURLSchema_GetAll_Call {
	return &MockURLSchema_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *MockURLSchema_GetAll_Call) Run(run func()) *MockURLSchema_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockURLSchema_GetAll_Call) Return(_a0 string) *MockURLSchema_GetAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockURLSchema_GetAll_Call) RunAndReturn(run func() string) *MockURLSchema_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetVersion provides a mock function with given fields: name, version
func (_m *MockURLSchema) GetVersion(name string, version string) string {
	ret := _m.Called(name, version)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(name, version)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockURLSchema_GetVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersion'
type MockURLSchema_GetVersion_Call struct {
	*mock.Call
}

// GetVersion is a helper method to define mock.On call
//  - name string
//  - version string
func (_e *MockURLSchema_Expecter) GetVersion(name interface{}, version interface{}) *MockURLSchema_GetVersion_Call {
	return &MockURLSchema_GetVersion_Call{Call: _e.mock.On("GetVersion", name, version)}
}

func (_c *MockURLSchema_GetVersion_Call) Run(run func(name string, version string)) *MockURLSchema_GetVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockURLSchema_GetVersion_Call) Return(_a0 string) *MockURLSchema_GetVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockURLSchema_GetVersion_Call) RunAndReturn(run func(string, string) string) *MockURLSchema_GetVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetVersionsOf provides a mock function with given fields: name
func (_m *MockURLSchema) GetVersionsOf(name string) string {
	ret := _m.Called(name)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockURLSchema_GetVersionsOf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersionsOf'
type MockURLSchema_GetVersionsOf_Call struct {
	*mock.Call
}

// GetVersionsOf is a helper method to define mock.On call
//  - name string
func (_e *MockURLSchema_Expecter) GetVersionsOf(name interface{}) *MockURLSchema_GetVersionsOf_Call {
	return &MockURLSchema_GetVersionsOf_Call{Call: _e.mock.On("GetVersionsOf", name)}
}

func (_c *MockURLSchema_GetVersionsOf_Call) Run(run func(name string)) *MockURLSchema_GetVersionsOf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockURLSchema_GetVersionsOf_Call) Return(_a0 string) *MockURLSchema_GetVersionsOf_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockURLSchema_GetVersionsOf_Call) RunAndReturn(run func(string) string) *MockURLSchema_GetVersionsOf_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockURLSchema interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockURLSchema creates a new instance of MockURLSchema. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockURLSchema(t mockConstructorTestingTNewMockURLSchema) *MockURLSchema {
	mock := &MockURLSchema{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
