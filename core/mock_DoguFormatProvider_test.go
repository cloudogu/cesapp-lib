// Code generated by mockery v2.20.0. DO NOT EDIT.

package core

import mock "github.com/stretchr/testify/mock"

// MockDoguFormatProvider is an autogenerated mock type for the DoguFormatProvider type
type MockDoguFormatProvider struct {
	mock.Mock
}

type MockDoguFormatProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDoguFormatProvider) EXPECT() *MockDoguFormatProvider_Expecter {
	return &MockDoguFormatProvider_Expecter{mock: &_m.Mock}
}

// GetVersion provides a mock function with given fields:
func (_m *MockDoguFormatProvider) GetVersion() DoguApiVersion {
	ret := _m.Called()

	var r0 DoguApiVersion
	if rf, ok := ret.Get(0).(func() DoguApiVersion); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(DoguApiVersion)
	}

	return r0
}

// MockDoguFormatProvider_GetVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersion'
type MockDoguFormatProvider_GetVersion_Call struct {
	*mock.Call
}

// GetVersion is a helper method to define mock.On call
func (_e *MockDoguFormatProvider_Expecter) GetVersion() *MockDoguFormatProvider_GetVersion_Call {
	return &MockDoguFormatProvider_GetVersion_Call{Call: _e.mock.On("GetVersion")}
}

func (_c *MockDoguFormatProvider_GetVersion_Call) Run(run func()) *MockDoguFormatProvider_GetVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDoguFormatProvider_GetVersion_Call) Return(_a0 DoguApiVersion) *MockDoguFormatProvider_GetVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDoguFormatProvider_GetVersion_Call) RunAndReturn(run func() DoguApiVersion) *MockDoguFormatProvider_GetVersion_Call {
	_c.Call.Return(run)
	return _c
}

// ReadDoguFromString provides a mock function with given fields: content
func (_m *MockDoguFormatProvider) ReadDoguFromString(content string) (*Dogu, error) {
	ret := _m.Called(content)

	var r0 *Dogu
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*Dogu, error)); ok {
		return rf(content)
	}
	if rf, ok := ret.Get(0).(func(string) *Dogu); ok {
		r0 = rf(content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Dogu)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDoguFormatProvider_ReadDoguFromString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadDoguFromString'
type MockDoguFormatProvider_ReadDoguFromString_Call struct {
	*mock.Call
}

// ReadDoguFromString is a helper method to define mock.On call
//  - content string
func (_e *MockDoguFormatProvider_Expecter) ReadDoguFromString(content interface{}) *MockDoguFormatProvider_ReadDoguFromString_Call {
	return &MockDoguFormatProvider_ReadDoguFromString_Call{Call: _e.mock.On("ReadDoguFromString", content)}
}

func (_c *MockDoguFormatProvider_ReadDoguFromString_Call) Run(run func(content string)) *MockDoguFormatProvider_ReadDoguFromString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDoguFormatProvider_ReadDoguFromString_Call) Return(_a0 *Dogu, _a1 error) *MockDoguFormatProvider_ReadDoguFromString_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDoguFormatProvider_ReadDoguFromString_Call) RunAndReturn(run func(string) (*Dogu, error)) *MockDoguFormatProvider_ReadDoguFromString_Call {
	_c.Call.Return(run)
	return _c
}

// ReadDogusFromString provides a mock function with given fields: content
func (_m *MockDoguFormatProvider) ReadDogusFromString(content string) ([]*Dogu, error) {
	ret := _m.Called(content)

	var r0 []*Dogu
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*Dogu, error)); ok {
		return rf(content)
	}
	if rf, ok := ret.Get(0).(func(string) []*Dogu); ok {
		r0 = rf(content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Dogu)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDoguFormatProvider_ReadDogusFromString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadDogusFromString'
type MockDoguFormatProvider_ReadDogusFromString_Call struct {
	*mock.Call
}

// ReadDogusFromString is a helper method to define mock.On call
//  - content string
func (_e *MockDoguFormatProvider_Expecter) ReadDogusFromString(content interface{}) *MockDoguFormatProvider_ReadDogusFromString_Call {
	return &MockDoguFormatProvider_ReadDogusFromString_Call{Call: _e.mock.On("ReadDogusFromString", content)}
}

func (_c *MockDoguFormatProvider_ReadDogusFromString_Call) Run(run func(content string)) *MockDoguFormatProvider_ReadDogusFromString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDoguFormatProvider_ReadDogusFromString_Call) Return(_a0 []*Dogu, _a1 error) *MockDoguFormatProvider_ReadDogusFromString_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDoguFormatProvider_ReadDogusFromString_Call) RunAndReturn(run func(string) ([]*Dogu, error)) *MockDoguFormatProvider_ReadDogusFromString_Call {
	_c.Call.Return(run)
	return _c
}

// WriteDoguToString provides a mock function with given fields: dogu
func (_m *MockDoguFormatProvider) WriteDoguToString(dogu *Dogu) (string, error) {
	ret := _m.Called(dogu)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*Dogu) (string, error)); ok {
		return rf(dogu)
	}
	if rf, ok := ret.Get(0).(func(*Dogu) string); ok {
		r0 = rf(dogu)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*Dogu) error); ok {
		r1 = rf(dogu)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDoguFormatProvider_WriteDoguToString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteDoguToString'
type MockDoguFormatProvider_WriteDoguToString_Call struct {
	*mock.Call
}

// WriteDoguToString is a helper method to define mock.On call
//  - dogu *Dogu
func (_e *MockDoguFormatProvider_Expecter) WriteDoguToString(dogu interface{}) *MockDoguFormatProvider_WriteDoguToString_Call {
	return &MockDoguFormatProvider_WriteDoguToString_Call{Call: _e.mock.On("WriteDoguToString", dogu)}
}

func (_c *MockDoguFormatProvider_WriteDoguToString_Call) Run(run func(dogu *Dogu)) *MockDoguFormatProvider_WriteDoguToString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Dogu))
	})
	return _c
}

func (_c *MockDoguFormatProvider_WriteDoguToString_Call) Return(_a0 string, _a1 error) *MockDoguFormatProvider_WriteDoguToString_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDoguFormatProvider_WriteDoguToString_Call) RunAndReturn(run func(*Dogu) (string, error)) *MockDoguFormatProvider_WriteDoguToString_Call {
	_c.Call.Return(run)
	return _c
}

// WriteDogusToString provides a mock function with given fields: dogu
func (_m *MockDoguFormatProvider) WriteDogusToString(dogu []*Dogu) (string, error) {
	ret := _m.Called(dogu)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func([]*Dogu) (string, error)); ok {
		return rf(dogu)
	}
	if rf, ok := ret.Get(0).(func([]*Dogu) string); ok {
		r0 = rf(dogu)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func([]*Dogu) error); ok {
		r1 = rf(dogu)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDoguFormatProvider_WriteDogusToString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteDogusToString'
type MockDoguFormatProvider_WriteDogusToString_Call struct {
	*mock.Call
}

// WriteDogusToString is a helper method to define mock.On call
//  - dogu []*Dogu
func (_e *MockDoguFormatProvider_Expecter) WriteDogusToString(dogu interface{}) *MockDoguFormatProvider_WriteDogusToString_Call {
	return &MockDoguFormatProvider_WriteDogusToString_Call{Call: _e.mock.On("WriteDogusToString", dogu)}
}

func (_c *MockDoguFormatProvider_WriteDogusToString_Call) Run(run func(dogu []*Dogu)) *MockDoguFormatProvider_WriteDogusToString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*Dogu))
	})
	return _c
}

func (_c *MockDoguFormatProvider_WriteDogusToString_Call) Return(_a0 string, _a1 error) *MockDoguFormatProvider_WriteDogusToString_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDoguFormatProvider_WriteDogusToString_Call) RunAndReturn(run func([]*Dogu) (string, error)) *MockDoguFormatProvider_WriteDogusToString_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockDoguFormatProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockDoguFormatProvider creates a new instance of MockDoguFormatProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDoguFormatProvider(t mockConstructorTestingTNewMockDoguFormatProvider) *MockDoguFormatProvider {
	mock := &MockDoguFormatProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
